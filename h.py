from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
import os  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞, –ø–æ–ª—É—á–∞—è —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token="8174711542:AAFQXVG0FoO07Wo6kR_f5D7FWkpXMuiP84Y")
dp = Dispatcher()

a="10"
b="6"
c="2"
s=""
u=""
j=""
d=0


class Form(StatesGroup):
    name = State()
    age = State()
    city = State()
    obr = State()
    opyt = State()
    leng = State()
    dost = State()
    what = State()
    nav = State()
    zad1 = State()
    zad2 = State()
    zad3 = State()
    kon = State()


@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.set_state(Form.name)
    await message.answer(
        "üöÄ –ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!\n–ú–µ–Ω—è –∑–æ–≤—É—Ç MTS Education Bot, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–π—Ç–∏ –æ—Ç–±–æ—Ä –Ω–∞ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫—É –≤ –ú–¢–° ‚Äî —Ç–∞–∫—É—é –∂–µ, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –¥—Ä—É–≥–∏–µ —Ä–µ–±—è—Ç–∞ –≤—ã—Ö–æ–¥—è—Ç –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É 250 000 ‚ÇΩ!")
    await message.answer("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–µ–±–µ, —Ä–∑–±–∏—Ç—ã—Ö –Ω–∞ 3 —Ä–∞–∑–¥–µ–ª–∞, –∏ —Ä–µ—à–∏—Ç–µ 3 –∑–∞–¥–∞—á–∏")
    await message.answer("–†–∞–∑–¥–µ–ª 1: –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)")

@dp.message(Form.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Form.age)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è, –≤ –≤–∏–¥–µ(**.**.****):")

@dp.message(Form.age)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(Form.city)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:")

@dp.message(Form.city)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Form.obr)
    await message.answer("–†–∞–∑–¥–µ–ª 2: –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—ã—Ç")
    await message.answer("–ö–∞–∫–æ–µ —É –≤–∞—Å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (—à–∫–æ–ª–∞, –∫–æ–ª–ª–µ–¥–∂, –≤—É–∑)?")

@dp.message(Form.obr)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(obr=message.text)
    await state.set_state(Form.opyt)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ IT –∏–ª–∏ —Å–º–µ–∂–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö? –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.")

@dp.message(Form.opyt)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(opyt=message.text)
    await state.set_state(Form.leng)
    await message.answer("–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –∑–Ω–∞–µ—Ç–µ?")

@dp.message(Form.leng)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(leng=message.text)
    await state.set_state(Form.dost)
    await message.answer("–£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –ª–∏ –≤—ã –≤ –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö, —Ö–∞–∫–∞—Ç–æ–Ω–∞—Ö –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö?")

@dp.message(Form.dost)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(dost=message.text)
    await state.set_state(Form.what)
    await message.answer("–†–∞–∑–¥–µ–ª 3: –ú–æ—Ç–∏–≤–∞—Ü–∏—è")
    await message.answer("–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ—Ç –ú–¢–°?")

@dp.message(Form.what)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(what=message.text)
    await state.set_state(Form.nav)
    await message.answer("–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è?")

@dp.message(Form.nav)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(nav=message.text)
    await state.set_state(Form.zad1)
    await message.answer("1 –∑–∞–¥–∞—á–∞\n–ù–∞–π–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤** –æ—Ç 100 –¥–æ 200.\n–û—Ç–≤–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ–º")
    await message.answer("–ß–∏—Å–ª–æ-–ø–∞–ª–∏–Ω–¥—Ä–æ–º** ‚Äî —ç—Ç–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, —Ç–∞–∫ –∏ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ. ")

@dp.message(Form.zad1)
async def process_name(message: types.Message, state: FSMContext):
    await state.set_state(Form.zad2)
    data = await state.get_data()
    print(data)
    await state.update_data(zad1=message.text)

    await message.answer("2 –∑–∞–¥–∞—á–∞\n–î–∞–Ω –º–∞—Å—Å–∏–≤ [-2, 1, -3, 4, -1, 2, 1, -5, 4]. –ù–∞–π–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.\n–û—Ç–≤–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ–º  ")

@dp.message(Form.zad2)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(zad2=message.text)
    data = await state.get_data()
    print(data)
    await state.set_state(Form.zad3)
    await message.answer("3 –∑–∞–¥–∞—á–∞\n–î–∞–Ω –º–∞—Å—Å–∏–≤ [2, 3, 1, 1, 4]. –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø—Ä—ã–∂–∫–∞. –ù–∞–π–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä—ã–∂–∫–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–Ω—Ü–∞.\n–û—Ç–≤–µ—Ç –≤–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ–º")


@dp.message(Form.zad3)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(zad3=message.text)
    await state.set_state(Form.kon)
    data = await state.get_data()
    print(data)
    kek = 0
    if a == data['zad1']:
        s="–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ"
        print(s)
        kek+=1
    else:
        s = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚ùå"
        print(s)
    if b == data['zad2']:
        u="–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ"
        print(u)
        kek += 1
    else:
        u = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚ùå"
        print(u)
    if c == data['zad3']:
        j="–ü—Ä–∞–≤–∏–ª—å–Ω–æ‚úÖ"
        print(j)
        kek += 1
    else:
        j = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ‚ùå"
        print(j)

    await message.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n1 –∑–∞–¥–∞—á–∞: {s}\n2 –∑–∞–¥–∞—á–∞: {u}\n3 –∑–∞–¥–∞—á–∞: {j}")

    if kek == 3:
        await message.answer("‚úÖ–í—ã –ø—Ä–∏–Ω—è—Ç—ã –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ —Å–æ–±—Å–µ–¥–æ–≤–∞–Ω–∏–µ")
    else:
        await message.answer("‚ùå–í—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ")

@dp.message(Form.kon)
async def process_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    print(data)
    await state.update_data(kon=message.text)

dp.run_polling(bot)
